{
  "include": ["src/**/*", "test/**/*"],
  "compilerOptions": {
    // Specify explicitly (don’t derive from source file paths):
    "rootDir": ".",
    "outDir": "dist",

    //===== Output: JavaScript =====
    "target": "ES2023",
    "module": "Node16", // sets up "moduleResolution"
    // Emptily imported modules must exist
    "noUncheckedSideEffectImports": true,
    "sourceMap": true, // .js.map files

    //========== Compiling TS with tools other than tsc ==========
    //----- Helps with emitting .js -----
    // Enforces keyword `type` for type imports etc.
    "verbatimModuleSyntax": true, // implies "isolatedModules"
    // Forbids non-JavaScript language constructs such as
    // JSX, enums, constructor parameter properties and namespaces.
    // Important for type stripping.
    // "erasableSyntaxOnly": true, // TS 5.8+

    //----- Helps with emitting .d.ts -----
    // - Forbids inferred return types of exported functions etc.
    // - Only allowed if `declaration` or `composite` are true
    "isolatedDeclarations": true,

    //===== Type checking =====
    "strict": true, // activates several useful options
    "exactOptionalPropertyTypes": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true,
    "noUncheckedIndexedAccess": true,

    //===== Output: declarations =====
    "declaration": true, // .d.ts files
    // “Go to definition” jumps to TS source etc.:
    "declarationMap": true, // .d.ts.map files
  }
}
